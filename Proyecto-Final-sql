-- CREACION DE TABLAS Y BD --
DROP DATABASE e_commerce;
CREATE DATABASE e_commerce;

USE e_commerce;
-- Tabla de clientes (t1)--
CREATE TABLE Clientes(
Usuario VarChar(21) NOT NULL,
Nombre	VarChar(21) NOT NULL,
Apellido	VarChar(21) NOT NULL,
Direccion	VarChar(60) NOT NULL,
Telefono	VarChar(15) NOT NULL,
Edad	TinyInt NOT NULL,
Tarjeta_1	VarChar(17) NOT NULL,
Tarjeta_2	VarChar(17),
Tarjeta_3	VarChar(17),
RFC	 VarChar (20),

PRIMARY KEY (Usuario)
);
-- Tabla de pedidos (t2)--
CREATE TABLE Pedidos(
ID_Pedido	VarChar(30) NOT NULL,
Usuario	VarChar(21) NOT NULL,
Monto	integer NOT NULL,
Fecha	DateTime NOT NULL,
Direccion	VarChar(60) NOT NULL,
Nombre_Articulo	VarChar(21) NOT NULL,
Talla VarChar(5) NOT NULL,
Cantidad	int NOT NULL,

PRIMARY KEY (ID_Pedido),
FOREIGN KEY (Usuario) REFERENCES Clientes(Usuario)
);
-- Tabla de productos (t3)--
CREATE TABLE Productos(
SKU	VarChar(30) NOT NULL,
Nombre_Articulo	VarChar(21) NOT NULL,
Precio	integer NOT NULL,
Talla	VarChar(5),
Genero	VarChar(10) NOT NULL,
Color	VarChar(10) NOT NULL,
Tipo	VarChar(15) NOT NULL,
Disponibilidad	integer NOT NULL,
Almacen	VarChar(10) NOT NULL,

PRIMARY KEY (SKU)
);
-- Tabla de lista de almacenes (t4)--
CREATE TABLE Almacen(
ID_Almacen	VarChar(10) NOT NULL,
Direccion	VarChar(60) NOT NULL,
Telefono	VarChar(15) NOT NULL,
Zona_distribucion	VarChar(10) NOT NULL,
Disponibilidad	integer NOT NULL,
Capacidad	integer NOT NULL,

PRIMARY KEY (ID_Almacen)
);
-- Tabla de proveedores (t5)--
CREATE TABLE Proveedores(
ID_Proveedor VarChar(30) NOT NULL,
RFC	VarChar(20) NOT NULL,
Direccion Varchar(60),
Contacto VarChar(30),
Tipo	VarChar(15) NOT NULL,

PRIMARY KEY (ID_Proveedor)
);
-- Tabla que registrara los cambios y modificaciones de la tabla de clientes (t6)--
CREATE TABLE Cambios_Clientes(
Usuario	VarChar(21) NOT NULL,
Nombre	VarChar(21) NOT NULL,
Apellido	VarChar(21) NOT NULL,
Direccion	VarChar(60) NOT NULL,
Telefono	VarChar(15) NOT NULL,
Edad	integer NOT NULL,
Tarjeta_1	integer NOT NULL,
Tarjeta_2	integer,
Tarjeta_3	integer,
RFC	VarChar (20),
Fecha_de_Cambio Date NOT NULL,
Tiempo_Actualizacion Time NOT NULL,
ID_Cambio Integer NOT NULL,
Tipo_Cambio VarChar(15) NOT NULL,

PRIMARY KEY (ID_Cambio),
FOREIGN KEY (Usuario) REFERENCES Clientes(Usuario)
);
-- Tabla de movimientos (t7)--
CREATE TABLE Movimientos(
ID_Ops VarChar (40) NOT NULL,
ID_Almacen	VarChar(10) NOT NULL,
Direccion	VarChar(60) NOT NULL,
Telefono	VarChar(15) NOT NULL,
Direccion_Envio	VarChar(10) NOT NULL,
Tiempo_Entrega	Date NOT NULL,

PRIMARY KEY (ID_Ops),
FOREIGN KEY (ID_Almacen) REFERENCES Almacen(ID_Almacen)
);
-- Tabla de operaciones de los almacenes (t8)--
CREATE TABLE Operaciones_Almacen(
ID_Ops VarChar (40) NOT NULL,
ID_Almacen	VarChar(10) NOT NULL,
Direccion	VarChar(60) NOT NULL,
Telefono	VarChar(15) NOT NULL,
Direccion_Envio	VarChar(10) NOT NULL,
Tiempo_Entrega	Date NOT NULL,
Fecha_Actualizacion Date NOT NULL,
Tiempo_Actualizacion Time NOT NULL,
ID_Actualizacion  VarChar(40) NOT NULL,
Tipo_Actualizacion VarChar(15) NOT NULL,

PRIMARY KEY (ID_Ops),
FOREIGN KEY (ID_Almacen) REFERENCES Almacen(ID_Almacen)
);
-- Tabla de pruebas en la base de datos (t9)--
CREATE TABLE Pruebas_Varias(
ID_Test VarChar (40) NOT NULL,
Test_Text VarChar (100), 
Fecha_Actualizacion Date NOT NULL,
Tiempo_Actualizacion Time NOT NULL,
Tipo_Actualizacion VarChar(15) NOT NULL,

PRIMARY KEY (ID_Test)
);
-- Tabla de pruebas iniciales en la base de datos (t10)--
CREATE TABLE Test_01(
ID_Test01 VarChar (40) NOT NULL,
Test_Field VarChar (20),
Test_Text VarChar (100),
Fecha_Actualizacion Date NOT NULL,
Tiempo_Actualizacion Time NOT NULL,

PRIMARY KEY (ID_Test01)
);
-- Tabla de pedidos eliminados por nosotros (t11) --
CREATE TABLE Pedidos_eliminados(
ID_Eliminado VarChar (30) NOT NULL,
ID_Pedido VarChar(30) NOT NULL,
Fecha Date NOT NULL,
Nota VarChar(50),

PRIMARY KEY (ID_Eliminado),
FOREIGN KEY (ID_Pedido) REFERENCES Pedidos(ID_Pedido)
);
-- Tabla de ordenes a proveedores (t12) --
CREATE TABLE Orden_Proveedores(
ID_Orden VarChar(30) NOT NULL,
ID_Proveedor VarChar(30) NOT NULL,
SKU	VarChar(30) NOT NULL,
Nombre_Articulo	VarChar(21) NOT NULL,
Costo	integer NOT NULL,
Talla	VarChar(5),
Genero	VarChar(10) NOT NULL,
Color	VarChar(10) NOT NULL,
Tipo	VarChar(15) NOT NULL,
Almacen	VarChar(10) NOT NULL,

PRIMARY KEY (ID_Orden),
FOREIGN KEY (ID_Proveedor) REFERENCES Proveedores(ID_Proveedor)
);
-- Tabla de ordenes canceladas a proveedores (t13) --
CREATE TABLE Orden_cancelada(
ID_Cancelacion VarChar(30) NOT NULL,
ID_Orden VarChar(30) NOT NULL,
ID_Proveedor VarChar(30) NOT NULL,
Fecha_cancelacion date,

PRIMARY KEY (ID_cancelacion),
FOREIGN KEY (ID_Orden) REFERENCES Orden_Proveedores(ID_Orden)
);
-- Tabla de empleados (t14) --
CREATE TABLE Empleados(
ID_Empleado VarChar(10) NOT NULL,
Nombre VarChar(21) NOT NULL,
Apellido VarChar(21) NOT NULL,
Edad Integer,
Puesto VarChar(20) NOT NULL,
Usuario VarChar(21),
Descuento Integer,
Telefono VarChar(10),

PRIMARY KEY (ID_Empleado),
FOREIGN KEY (Usuario) REFERENCES Clientes(Usuario)
);
-- Tabla de pedidos cancelados por el clinete (t15) --
CREATE TABLE Pedidos_cancelados(
ID_Cancelado VarChar(30) NOT NULL,
ID_Pedido VarChar(30) NOT NULL,
Usuario VarChar(21) NOT NULL,
Fecha_Cancelacion Date NOT NULL,
Nota VarChar(50),
Devolucion Integer NOT NULL,

PRIMARY KEY(ID_Cancelado),
FOREIGN KEY (ID_Pedido) REFERENCES Pedidos(ID_Pedido)
);
-- Tabla de pedidos retornados por el cliente (t16) --
CREATE TABLE Pedidos_devueltos(
ID_Retorno VarChar(30) NOT NULL,
ID_Pedido VarChar(30) NOT NULL,
Usuario VarChar(21) NOT NULL,
Fecha_Devolucion Date NOT NULL,
Nota VarChar(50) NOT NULL,
ID_Almacen VarChar(10) NOT NULL,

PRIMARY KEY(ID_Retorno),
FOREIGN KEY (ID_Pedido) REFERENCES Pedidos(ID_Pedido)
);


-- AGREGAR DATA EN TABLAS -- 
-- Solo algunas tablas de las 15 tablas tienen regstro inicial de datos ya que el resto de las tablas son vistas o tablas con modificacioens adicionales -- 




-- PRUEBAS BASE DE CONSULTA --
SELECT * FROM CLIENTES;
SELECT * FROM TEST_01;
SELECT * FROM PEDIDOS;
SELECT * FROM PEDIDOS p LEFT JOIN CLIENTES c ON p.usuario=c.usuario;


-- CREACION DE VISTAS --

CREATE VIEW ROPA_CABALLERO_DISPONIBLE AS 
SELECT SKU, Nombre_Articulo, Precio, Talla, Genero, Color, Tipo, Almacen 
FROM Productos 
WHERE Genero = 'H' AND Disponibilidad NOT IN ('0',NULL);

SELECT * 
FROM e_commerce.ropa_caballero_disponible;

CREATE VIEW ROPA_DAMA_DISPONIBLE AS 
SELECT SKU, Nombre_Articulo, Precio, Talla, Genero, Color, Tipo, Almacen 
FROM Productos 
WHERE Genero = 'M' AND Disponibilidad NOT IN ('0',NULL);

SELECT * 
FROM e_commerce.ropa_dama_disponible;

CREATE VIEW ULIMOS_PEDIDOS AS 
SELECT * 
FROM Pedidos 
WHERE ID_Pedido IS NOT NULL 
ORDER BY Fecha DESC;

SELECT * 
FROM e_commerce.ultimos_pedidos;

CREATE VIEW ALMACEN_LLENO AS 
SELECT * 
FROM Almacen 
WHERE Capacidad = '0';

SELECT * 
FROM e_commerce.almacen_lleno;

CREATE VIEW USUARIOS_ACTIVOS AS 
SELECT DISTINCT C.Usuario, C.Nombre, C.Apellido, COUNT(P.ID_Pedido) AS Pedidos_Usuario 
FROM Clientes C JOIN Pedidos P ON C.Usuario = P.Usuario 
WHERE P.ID_Pedido IS NOT NULL 
GROUP BY 1 ORDER BY Pedidos_Usuario DESC LIMIT 10;

SELECT * 
FROM e_commerce.usuarios_activos;

-- CREACION DE FUNCIONES --
-- Esta funcion calcula el tiempo que ha pasado en dias, -- -- sera uilizado para regresar el tiempo ocurrido en dias de las compras realizadas--

DELIMITER //

CREATE FUNCTION no_de_dias (Fecha1 DATE) RETURNS int DETERMINISTIC
BEGIN DECLARE Fecha2 DATE; Select current_date()into Fecha2; RETURN (Fecha2)-(Fecha1);

END

; //

DELIMITER ;

-- Esta funcion determina si los usuarios son mayores de edad o no --

DELIMITER //

CREATE FUNCTION Mayor_Edad (Edad INTEGER) RETURNS VarChar(4) DETERMINISTIC

BEGIN IF Edad >= 21 THEN RETURN 'YES'; ELSE RETURN 'NO'; END IF;

END

; //

DELIMITER ;

-- CREACION DE PROCESO 'SP' -- 

DELIMITER // 
CREATE PROCEDURE Order_Campo (IN campo VarChar(30), IN orden INTEGER)

BEGIN IF @order = 1 THEN SELECT * 
FROM Pedidos 
ORDER BY @campo DESC;
ELSE 
SELECT * 
FROM Pedidos 
ORDER BY @campo ASC;
END IF;
END;

//

-- TRANSACCIONES Y COMANDOS TLC--
-- Pruebas_Varias-- 
INSERT INTO Pruebas_Varias VALUES ("1A", "Primer prueba de la tabla", CURDATE(), NOW(), "INS"); 
COMMIT;

INSERT INTO Pruebas_Varias VALUES ("2A", "Segunda prueba de la tabla", CURDATE(), NOW(), "INS"); 
COMMIT;

UPDATE Pruebas_Varias SET Test_Text = 'Primera prueba actualizada' 
WHERE ID_Test = '1A'; 
SAVEPOINT A;

UPDATE Pruebas_Varias SET Test_Text = 'Primer prueba de tabla' 
WHERE ID_Test = '2A'; 
SAVEPOINT B;

ROLLBACK to A; 
COMMIT;

-- Insertando 8 nuevos registros en la tabla de pedidos con un savepoint a los 4 registros y otro a los 8 registros--
INSERT INTO Pedidos VALUES ('51','Juan32','2000.00','2022-10-20 0:0:0','74 Calle Boston, Ciudad de Mexico 78323','Pantalon_Hombre','H','2');

INSERT INTO Pedidos VALUES ('52','SofOrt","3800.00','2022-6-10 0:0:0','172 calle Lago, Queretaro,Queretaro 61632','Blusa_Mujer','M','4');

INSERT INTO Pedidos VALUES ('53','MP002','1598.00','2022-04-10 0:0:0','222 Calle Juarez, Saltillo 12310','Pantalon_Mujer','S','2');

INSERT INTO Pedidos VALUES ('54','JJSuarez','1600.00','2021-02-18 0:0:0','254 Calle Espino, Chapultepec, CDMX 53624','Playera_Hombre','L','4');

SAVEPOINT A;

INSERT INTO Pedidos VALUES ('55','JJSuarez','350.00','2022-02-18 0:0:0','254 Calle Espino, Chapultepec, CDMX 53624','Cartera_Hombre',NULL,'1');

INSERT INTO Pedidos VALUES ('56','JP29','5000.00','2021-12-1 0:0:0','12 Calle Lago, Interlomas, CDMX 77292','Camisa_Hombre','M','4');

INSERT INTO Pedidos VALUES ('57','SofOrt','1900.00','2022-04-05 0:0:0','172 calle Lago, Queretaro,Queretaro 61632','Blusa_Mujer','S','2');

INSERT INTO Pedidos VALUES ('58','SofOrt','799.00','2022-02-18 0:0:0','172 calle Lago, Queretaro,Queretaro 61632','Pantalon_Mujer','S','1');

SAVEPOINT B;

ROLLBACK TO A; 
COMMIT;

--FIN--
